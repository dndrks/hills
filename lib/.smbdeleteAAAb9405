Engine_Krick : CroneEngine {
	var pg;
	var synthArray;
	var bd_amp;

	*new { arg context, doneCallback;
		^super.new(context, doneCallback);
	}

	alloc {
		pg = ParGroup.tail(context.xg);
		synthArray = Array.newClear(10);
		stateArray = Array.newClear(10);

		SynthDef("bd", {
			arg out, md_carHz = 55,
			md_modHz = 600, md_modAmp = 127, md_modAtk = 0, md_modRel = 0.05, md_feedAmp = 10,
			md_carAtk = 0, md_carRel = 0.3, md_amp = 2,
			md_pan = 0, md_rampDepth = 0.5, md_rampDec = 0.3, md_AMD = 1, md_AMF = 2698.8,
			md_EQF = 6000, md_EQG = 0, md_brate = 24000, md_bcnt = 24,
			md_click = 0, md_LPfreq = 19000, md_HPfreq = 0, md_filterQ = 1,
			kill_gate = 1;
			var md_car, md_mod, md_carEnv, md_modEnv, md_carRamp,
			md_feedMod, md_feedCar, md_ampMod, md_EQ,
			mod_1,mod_2,mod_3,mod_4,mod_5,mod_6,mod_7,mod_8, kill_env,slewLP, slewHP;
			md_modEnv = EnvGen.kr(Env.perc(md_modAtk, md_modRel));
			// md_modEnv = EnvGen.kr(Env([0,1,0], [md_modAtk,md_modRel], curve: \sin));
			md_carRamp = EnvGen.kr(Env([1000, 0.000001], [md_rampDec], curve: \exp));
			/*	md_carRamp = md_carRamp.linlin(0, 1000, 0, -150);*/
			md_carEnv = EnvGen.kr(envelope: Env.perc(md_carAtk, md_carRel),gate: kill_gate);

			mod_1 = SinOscFB.ar(
				md_modHz+ ((md_carRamp*3)*md_rampDepth),
				md_feedAmp,
				md_modAmp*10
			)* md_modEnv;

			md_car = SinOsc.ar(md_carHz + (mod_1) + (md_carRamp*md_rampDepth)) * md_carEnv * md_amp;
			md_click = md_amp/4;
			md_ampMod = SinOsc.ar(freq:md_AMF,mul:(md_AMD/2),add:1);

			md_car = (md_car + (LPF.ar(Impulse.ar(0.003),16000,1)*md_click))* md_ampMod;

			md_car = BPeakEQ.ar(in:md_car,freq:md_EQF,rq:1,db:md_EQG,mul:1);
			slewLP = Lag2.kr(md_LPfreq,0.1);
			slewHP = Lag2.kr(md_HPfreq,0.1);
			md_car = RLPF.ar(in:md_car,freq:slewLP, rq: md_filterQ, mul:1);
			md_car = RHPF.ar(in:md_car,freq:slewHP, rq: md_filterQ, mul:1);

			md_car = Decimator.ar(Pan2.ar(md_car,md_pan),md_brate,md_bcnt,1.0);
			Out.ar(out, md_car);
			FreeSelf.kr(Done.kr(md_carEnv) * Done.kr(md_modEnv));
		}).add;

		this.addCommand("trig","isfffffffffffffffffff", {
		arg msg;
			if (synthArray[msg[1]-1] !=nil, {
				synthArray[msg[1]-1].set(\kill_gate,-1.05);
			});
			/*if(synthArray[msg[1]-1].notNil,{
				synthArray[msg[1]-1].free; /*this causes clicks?*/
			});*/
		synthArray[msg[1]-1]=Synth(msg[2],
			[
			\out,0,
			\md_amp,msg[3],
			\md_carHz,msg[4],
			\md_carAtk,msg[5],
			\md_carRel,msg[6],
			\md_rampDepth,msg[7],
			\md_rampDec,msg[8],
			\md_modAmp,msg[9],
			\md_modHz,msg[10],
			\md_modAtk,msg[11],
			\md_modRel,msg[12],
			\md_feedAmp,msg[13],
			\md_AMD,msg[14],
			\md_AMF,msg[15],
			\md_LPfreq,msg[16],
			\md_HPfreq,msg[17],
			\md_filterQ,msg[18],
			\md_pan,msg[19],
			\md_brate,msg[20],
			\md_bcnt,msg[21]
			]);
			NodeWatcher.register(synthArray[msg[1]-1]);
			synthArray[msg[1]-1].onFree({
				stateArray[msg[1]-1] = false;
				("state is "++(stateArray[msg[1]-1])).postln;
			});
		});

	//BASS DRUM

	this.addCommand("LEV","isf",{
		arg msg;
		if (synthArray[msg[1]-1].isRunning,{
	      synthArray[msg[1]-1].set(\md_amp,msg[3]);
		});
	});

	this.addCommand("PTCH","isf",{
		arg msg;
    	if (synthArray[msg[1]-1].isRunning,{
    	  synthArray[msg[1]-1].set(\md_carHz,msg[3]);
    	});
	});
	this.addCommand("ATK","isf",{
		arg msg;
    	if (synthArray[msg[1]-1].isRunning,{
    	  synthArray[msg[1]-1].set(\md_carAtk,msg[3]);
    	});
	});
	this.addCommand("DEC","isf",{
		arg msg;
    	if (synthArray[msg[1]-1].isRunning,{
    	  synthArray[msg[1]-1].set(\md_carRel,msg[3]);
    	});
	});
	this.addCommand("RAMP","isf",{
		arg msg;
    	if (synthArray[msg[1]-1].isRunning,{
    	  synthArray[msg[1]-1].set(\md_rampDepth,msg[3]);
    	});
	});
	this.addCommand("RDEC","isf",{
		arg msg;
    	if (synthArray[msg[1]-1].isRunning,{
    	  synthArray[msg[1]-1].set(\md_rampDec,msg[3]);
    	});
	});
	this.addCommand("MOD","isf",{
		arg msg;
    	if (synthArray[msg[1]-1].isRunning,{
    	  synthArray[msg[1]-1].set(\md_modAmp,msg[3]);
    	});
	});
	this.addCommand("MFRQ","isf",{
		arg msg;
    	if (synthArray[msg[1]-1].isRunning,{
    	  synthArray[msg[1]-1].set(\md_modHz,msg[3]);
    	});
	});
	this.addCommand("MATK","isf",{
		arg msg;
    	if (synthArray[msg[1]-1].isRunning,{
    	  synthArray[msg[1]-1].set(\md_modAtk,msg[3]);
    	});
	});
	this.addCommand("MDEC","isf",{
		arg msg;
    	if (synthArray[msg[1]-1].isRunning,{
    	  synthArray[msg[1]-1].set(\md_modRel,msg[3]);
    	});
	});
	this.addCommand("MFB","isf",{
		arg msg;
    	if (synthArray[msg[1]-1].isRunning,{
    	  synthArray[msg[1]-1].set(\md_feedAmp,msg[3]);
    	});
	});
	this.addCommand("PAN","isf",{
		arg msg;
    	if (synthArray[msg[1]-1].isRunning,{
    	  synthArray[msg[1]-1].set(\md_pan,msg[3]);
    	});
	});
	this.addCommand("SRR","isf",{
		arg msg;
    	if (synthArray[msg[1]-1].isRunning,{
    	  synthArray[msg[1]-1].set(\md_brate,msg[3]);
    	});
	});
	this.addCommand("BCR","isf",{
		arg msg;
    	if (synthArray[msg[1]-1].isRunning,{
    	  synthArray[msg[1]-1].set(\md_bcnt,msg[3]);
    	});
	});
	this.addCommand("LPF","isf",{
		arg msg;
    	if (synthArray[msg[1]-1].isRunning,{
    	  synthArray[msg[1]-1].set(\md_LPfreq,msg[3]);
    	});
	});
	this.addCommand("HPF","isf",{
		arg msg;
    	if (synthArray[msg[1]-1].isRunning,{
    	  synthArray[msg[1]-1].set(\md_HPfreq,msg[3]);
    	});
	});


	}
	free {
		(0..9).do({arg i; synthArray[i].free});
	}
}